<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Huang Yujie&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/bb904430b38398d2d1ab671d0d4cc8de</icon>
  <subtitle>Welcome to my blog!</subtitle>
  <link href="https://nobodyyj.github.io/atom.xml" rel="self"/>
  
  <link href="https://nobodyyj.github.io/"/>
  <updated>2023-11-28T13:41:58.561Z</updated>
  <id>https://nobodyyj.github.io/</id>
  
  <author>
    <name>Huang Yujie</name>
    <email>struggle_hyj@outlook.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>股票形态相似度研究</title>
    <link href="https://nobodyyj.github.io/post/32dc4a05.html"/>
    <id>https://nobodyyj.github.io/post/32dc4a05.html</id>
    <published>2023-11-28T13:33:27.000Z</published>
    <updated>2023-11-28T13:41:58.561Z</updated>
    
    <content type="html"><![CDATA[<p><font color="red">1.东财数据+供应链数据</font></p><p><font color="red">2.对东财数据降噪处理，计算簇内</font></p><p><font color="red">3.在某一个时间节点，我们回看过去已知的概念数据or供应链数据</font></p><p><font color="red">机器学习做出来的效果不好，所以尝试对数据进行降噪处理</font></p><h1 id="section">11.27</h1><h3 id="具体操作">具体操作</h3><p>将概念算出来之后，得到每一天每个概念内股票的关系强度（比如等权的pearson系数），和宽基指数内的关系强度进行对比。可以尝试将concept内关系最弱的股票剔除，看概念内股票的关系有没有明显增强。</p><h3 id="先上手计算欧氏距离">先上手计算欧氏距离</h3><p>欧氏距离为常见的计算时间序列相似度的方法，该方法可以直接衡量两个时间序列之间的距离，其计算公式为:<span class="math display">\[D=\sqrt{\sum_{i=1}^N\left(X_i-Y_i\right)^2}\]</span></p><p>其中 <span class="math inline">\(\mathrm{N}\)</span> 为序列 <span class="math inline">\(\mathrm{X}\)</span> 和序列 <span class="math inline">\(\mathrm{Y}\)</span> 的长度。 由上述公式可以看出,若要计算两个序列之间的欧氏距离, 有两个局限性: 1、两个序列的长度需要相同,但在实际研究工作中, 找到满足上述条件的序列并非易事。2、该方法也无法进行异步相似度计算，因此会对实际上较为相似的两个时间序列其相似性做出误判。</p><h3 id="further-discussion">further discussion</h3><p>1.能不能做成因子</p><p>2.使用分钟频的数据是否会更有效？（or selected minutefrequency，比如volatility集聚现象重合）</p><h1 id="section-1">11.28</h1><p>从过往研究来看，度量时间序列相似性的方法大致分为4类：</p><p>第一类为<strong>基于特征的相似性度量方法</strong>，如相关系数、互信息等；第二类为<strong>锁步（时间序列“一对一”比较）的距离度量方法</strong>，典型方法有闵可夫斯基距离（可衍生为曼哈顿距离、欧氏距离、切比雪夫距离）、Hausdorff距离、余弦相似度等；第三类为<strong>弹性（允许时间序列“一对多”比较）的距离度量方法</strong>，代表方法为动态时间弯曲距离（DTW）、编辑距离（EDR）、最长公共子序列（LCSS）；第四类方法关注时间序列的<strong>变化相似性</strong>，如ARMA、HMM等。</p><h2 id="dtw">DTW</h2><h3 id="定义">定义</h3><p>对于时间序列 <span class="math inline">\(X\)</span> 和 <span class="math inline">\(Y\)</span> ，定义非负函数 <span class="math inline">\(f\)</span> 来衡量时间序列中的点 <span class="math inline">\(x \_\)</span>i和点 <span class="math inline">\(y\)</span> j的距离: <span class="math display">\[d(i, j)=f\left(x_{-} i, y \_j\right) \geq 0,\]</span></p><p>除常见的欧氏距离外，距离函数f也可以选取余弦相似度、汉明距离、曼哈顿距离、切比雪夫距离等其他距离度量方法。如果时间序列是多维的，则将每个维度的距离相加即可（确保各维度量纲一致）。</p><p>定义了时间序列中点与点的距离之后，两段时间序列即可形成一个 <span class="math inline">\(N \times M\)</span>的点阵，从点阵的右上角到左下角可以形成一条弯曲路径 (Warping Path)。</p><p>给定弯曲路径之后，便可以计算时间序列X和Y的标准化累计时间弯曲距离。另外，为了确保弯曲路径的合理性，通常需要满足3 大基本条件: - 终点条件 (EndpointConstraints)：要求弯曲路径的起点和终点必须为点阵平面的对角单元； -连续性条件 (Local ContinuityConstraints)：要求弯曲路径的每一步为相邻的单元（包括对角相邻单元)； -单调性条件 (MonotonicityConditions)：由于语音序列或证券交易数据等时间序列是有时序性的(时间不可倒流)，所以从实际意义出发，弯曲路径在点阵图上必须是单调的。</p><p>显然，满足以上3个条件的路径有很多条，选取哪条路径来计算DTW距离呢?一个很自然的想法是选取使得DTW距离最小的路径，具体推导过程需要利用动态规划算法（DynamicProgramming），这里不展开说明。最后，使得DTW距离最小化的最佳匹配路径需满足如下递归条件：<span class="math display">\[\delta(i, j)=d(i, j)+\min [\delta(i-1, j), \delta(i-1, j-1), \delta(i,j-1)]\]</span> <img src="/post/32dc4a05/640.png" alt="640"></p><h3 id="传统的dtw算法存在两点缺陷"><strong>传统的DTW算法存在两点缺陷</strong></h3><figure><img src="/post/32dc4a05/640%20(1).png" alt="640 (1)"><figcaption aria-hidden="true">640 (1)</figcaption></figure><p>1）算法对时间序列进行伸缩和平移时，可能存在过度伸缩或平移，产生时间序列点之间的“病态匹配”，如图8所示，B为两段时间序列的真实匹配情况，C为DTW算法下的匹配结果，显然较不合理，某些地方被过度平移和伸缩了</p><p>2）传统DTW算法运算量较大，时间复杂度较高。对于择时策略本身而言，显然第一个问题更加重要，如果不是高频策略，则运算复杂度对策略的影响不大，我们更关注距离度量的精度和策略实际效果。本节将针对“病态匹配”的问题对DTW算法做出改进，以提升匹配精度和策略效果。</p><hr><h3 id="病态匹配的改进方向">“病态匹配”的改进方向：</h3><p>加权DTW算法（Weighted Dynamic TimeWarping，WDTW）、导数DTW算法（Derivative Dynamic TimeWarping，DDTW）、步模式（Step Pattern）、全局约束（GlobalConstraints）</p><h4 id="全局约束-global-constraints">(1) 全局约束 (GlobalConstraints)</h4><p><strong>限制匹配路径尽可能接近对角线</strong>、<strong>对匹配路径整体进行限制</strong></p><p>传统的DTW算法允许匹配路径可以在图6中的点阵中任意生成（需满足上一节的3个基本条件），全局约束要求匹配路径只能在限定的区域内生成，常用的全局约束方法有Sakoe-ChibaConstraint和Itakura Parallelogram等。 Sakoe-ChibaConstraint，需设定窗口限制参数r，即最佳匹配路径须在距点阵对角线距离为r的区域内；ItakuraParallelogram将匹配路径限定在一个平行四边形区域中，平行四边形的四条边的斜率分别为2和0.5。</p><h4 id="局部约束local-constraints"><strong>(2) 局部约束（LocalConstraints）</strong></h4><p><strong>对匹配路径中每一步进行约束</strong></p><h5 id="a.步模式">a.<strong>步模式</strong></h5><p><strong>放松连续性条件，即可以与不相邻的点匹配，便能形成新的递归方式，即步模式</strong><img src="/post/32dc4a05/640%20(2).png" alt="640 (2)"></p><h5 id="b.加权方式">b.<strong>加权方式</strong></h5><figure><img src="/post/32dc4a05/640%20(3)-1701157416807-7.png" alt="640 (3)"><figcaption aria-hidden="true">640 (3)</figcaption></figure><p>模型有2个主要参数：序列长度l和距离阈值k，其中距离阈值k设置目的是当筛选相似的历史序列时，选取距离小于k的历史序列。若k选取过小，则会遗漏相似的历史序列；若k选取过大，则实际上不相似的历史序列也会被选入。</p><h3 id="我的问题">我的问题：</h3><p>1.能否利用聚类算法通过计算出DTW的相关度从而二次聚类？</p><p>做法参考：https://mp.weixin.qq.com/s/ODXny7pqV12LQ59TDkFkcQ</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;font color=&quot;red&quot;&gt;1.东财数据+供应链数据&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;red&quot;&gt;2.对东财数据降噪处理，计算簇内&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;red&quot;&gt;3.在某一个时间节点，我们回看过去已知的概念数</summary>
      
    
    
    
    
    <category term="实习" scheme="https://nobodyyj.github.io/tags/%E5%AE%9E%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>搭建自用中低频回测系统</title>
    <link href="https://nobodyyj.github.io/post/d071063d.html"/>
    <id>https://nobodyyj.github.io/post/d071063d.html</id>
    <published>2023-11-26T02:40:46.000Z</published>
    <updated>2023-11-28T13:19:05.115Z</updated>
    
    <content type="html"><![CDATA[]]></content>
    
    
      
      
    <summary type="html">
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>C++学习、刷题之旅</title>
    <link href="https://nobodyyj.github.io/post/e4f86aa1.html"/>
    <id>https://nobodyyj.github.io/post/e4f86aa1.html</id>
    <published>2023-11-22T15:04:55.000Z</published>
    <updated>2023-11-25T15:46:41.149Z</updated>
    
    <content type="html"><![CDATA[<p><font size="5">今天开完硕士项目的前置课程启动会，“惊喜地”发现抽到了我基础最差的C++方向</font></p><figure><img src="/post/e4f86aa1/1700665835682.png" alt="1700665835682"><figcaption aria-hidden="true">1700665835682</figcaption></figure><p><font size="5">因此只好忍痛放着前面挖下的坑（Kaggle、MySQL学习记录），将学习C++的优先级提高，新开一个blog记录我学习C++、刷leetcode的经历。</font></p><figure><img src="/post/e4f86aa1/image-20231122231520699.png" alt="image-20231122231520699"><figcaption aria-hidden="true">image-20231122231520699</figcaption></figure><figure><img src="/post/e4f86aa1/image-20231122231533719.png" alt="image-20231122231533719"><figcaption aria-hidden="true">image-20231122231533719</figcaption></figure><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;font size=&quot;5&quot;&gt;今天开完硕士项目的前置课程启动会，“惊喜地”发现抽到了我基础最差的C++方向
&lt;/font&gt;&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/post/e4f86aa1/1700665835682.png&quot; alt=&quot;1700665835</summary>
      
    
    
    
    
    <category term="C++" scheme="https://nobodyyj.github.io/tags/C/"/>
    
    <category term="Leetcode" scheme="https://nobodyyj.github.io/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>实习思考</title>
    <link href="https://nobodyyj.github.io/post/e850ef3b.html"/>
    <id>https://nobodyyj.github.io/post/e850ef3b.html</id>
    <published>2023-11-12T04:35:38.000Z</published>
    <updated>2023-11-28T13:52:27.337Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实习思考"><a href="#实习思考" class="headerlink" title="实习思考"></a>实习思考</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    本文用来记录我在第一段量化实习中的思考，以及由此产生的关于学习方向的灵感。</p><h2 id="一、对于整体"><a href="#一、对于整体" class="headerlink" title="一、对于整体"></a>一、对于整体</h2><p>​    “量化投资始终坚持以基本面为核心，同时结合价量信息的方式，立足从投资的本源看问题，以长期有效的逻辑出发构建基础框架，再与交易逻辑相融合。无论是基本面还是价量，对每一类信息都会深挖背后的逻辑与含义，在此基础上，采用传统数学建模与领先的人工智能和机器学习技术结合的方式，不断随着市场结构与交易行为进行优化迭代。”</p><p>1.是如何将基本面因子与量价因子结合的，使用有效前沿吗？</p><p>2.交易逻辑+基础框架，是指因子组合之后划分为某个风格框架吗？</p><p>3.因子表现较好的作为多因子框架的因子，表现较差的作为机器学习模型的因子吗？这两者是如何结合的呢，也是划分为某个风格的吗？如何判断市场结构和交易行为，这是涉及到根据微观结构调整权重吗？</p><h2 id="二、挖因子"><a href="#二、挖因子" class="headerlink" title="二、挖因子"></a>二、挖因子</h2><p>1.对于中低频的基本面因子，正确的挖掘模式是什么样的呢，有哪些挖掘方法，效率如何？</p><p>2.对于高频因子，如何判断因子是处于正常波动还是失效的状态</p><p>3.如何在收益率和可解释性（逻辑性）进行取舍</p><h2 id="三、因子组合"><a href="#三、因子组合" class="headerlink" title="三、因子组合"></a>三、因子组合</h2><p>1.看完石川《因子投资方法与实践》后写</p><h2 id="四、交易信号"><a href="#四、交易信号" class="headerlink" title="四、交易信号"></a>四、交易信号</h2><h3 id="1-交易信号的分布需要服从norm吗？"><a href="#1-交易信号的分布需要服从norm吗？" class="headerlink" title="1.交易信号的分布需要服从norm吗？"></a>1.交易信号的分布需要服从norm吗？</h3><p>A：需要具体情况具体分析，比如需要分析异常值对应的标的是什么类型的。对于偏态厚尾信号的处理，可以使用power rank，展成均匀分布后根据表现改变power分配头部alpha的权重。-2023.11.27</p><h3 id="2-根据计算出的alpha值如何分配position？"><a href="#2-根据计算出的alpha值如何分配position？" class="headerlink" title="2.根据计算出的alpha值如何分配position？"></a>2.根据计算出的alpha值如何分配position？</h3><p>A：INSN、过滤invalid pool后，对pwrk的alpha值的非nan值的头部50%做多、尾部50%做空。 -2023.11.27</p><h2 id="五、回测框架"><a href="#五、回测框架" class="headerlink" title="五、回测框架"></a>五、回测框架</h2><font color="blue">Alphalens、Backtrader</font><p><strong><del>争取在2024年前使用backtrader跑一次回测</del></strong>    已完成-2023.11.27</p><h2 id="六、绩效归因"><a href="#六、绩效归因" class="headerlink" title="六、绩效归因"></a>六、绩效归因</h2><p>Brison框架</p><h2 id="七、宏观择时框架"><a href="#七、宏观择时框架" class="headerlink" title="七、宏观择时框架"></a>七、宏观择时框架</h2><p>基于周期理论、宏观数据，划分金融市场属于哪个时域（用Regime Switching、HMM类似思想的ML、RL模型）</p><h2 id="八、RL调参"><a href="#八、RL调参" class="headerlink" title="八、RL调参"></a>八、RL调参</h2><p>通过RL模型，选择合适的训练长度和预测长度，并且学习对应的可视化效果</p><p><strong>争取在2024年寒假跑一次机器学习模型来解决问这个问题</strong></p><h2 id="九、Qlib"><a href="#九、Qlib" class="headerlink" title="九、Qlib"></a>九、Qlib</h2><p>争取跑通qlib平台上用到的code，至少理解有哪些包、对应的功能<a href="https://mp.weixin.qq.com/s/W2xRQHrwphbl1Um7_BkGgQ">https://mp.weixin.qq.com/s/W2xRQHrwphbl1Um7_BkGgQ</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;实习思考&quot;&gt;&lt;a href=&quot;#实习思考&quot; class=&quot;headerlink&quot; title=&quot;实习思考&quot;&gt;&lt;/a&gt;实习思考&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h</summary>
      
    
    
    
    
    <category term="实习" scheme="https://nobodyyj.github.io/tags/%E5%AE%9E%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>实习中的idea</title>
    <link href="https://nobodyyj.github.io/post/698179e8.html"/>
    <id>https://nobodyyj.github.io/post/698179e8.html</id>
    <published>2023-10-11T02:29:03.000Z</published>
    <updated>2023-11-28T13:11:20.409Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-如何根据市场交易规则（最小交易单位）来执行计算出的交易信号。"><a href="#1-如何根据市场交易规则（最小交易单位）来执行计算出的交易信号。" class="headerlink" title="1.如何根据市场交易规则（最小交易单位）来执行计算出的交易信号。"></a>1.如何根据市场交易规则（最小交易单位）来执行计算出的交易信号。</h2><p>(考虑交易手数的话，需要解一个以最小化持仓误差为目标函数的、以总资金为硬约束的整数线性规划问题)</p><h2 id="2-利用alpha值生成持仓信号"><a href="#2-利用alpha值生成持仓信号" class="headerlink" title="2.利用alpha值生成持仓信号"></a>2.利用alpha值生成持仓信号</h2><p>在利用经过行业市值中性化、过滤掉涨跌停的final alpha values计算对应的持仓比例、多空持仓情况时，可以考虑使用power rank。<br><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">cal_cs_rank</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> maxvalue<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>minvalue<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    部分经过删除处理    '''</span>    res <span class="token operator">=</span> np_nan_array<span class="token punctuation">(</span>shape <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"float64"</span><span class="token punctuation">)</span>    res <span class="token operator">=</span> <span class="token punctuation">(</span>res <span class="token operator">-</span> np<span class="token punctuation">.</span>nanmin<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>np<span class="token punctuation">.</span>nanmax<span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">-</span> np<span class="token punctuation">.</span>nanmin<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>maxvalue <span class="token operator">-</span> minvalue<span class="token punctuation">)</span> <span class="token operator">+</span> minvalue    <span class="token keyword">return</span> res  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>具体是把因子先利用rank函数展成(-1,1)的均匀分布形式，再根据对于头部权重的考虑，对展开后的值取3次方、5次方。</p><p><strong>1次方就是均匀分布</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">plot_distribution<span class="token punctuation">(</span>Analyzer<span class="token punctuation">.</span>industry_analyze_detail<span class="token punctuation">(</span><span class="token string">'2021-03-29'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'factor'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values<span class="token punctuation">,</span><span class="token string">'power=1'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/post/698179e8/1次.png" alt="1次"></p><p>取奇次幂可以放大头部权重</p><div class="table-container"><table><thead><tr><th>power=3</th><th>power=5</th></tr></thead><tbody><tr><td><code>plot_distribution(tmp**3,&#39;power=3&#39;)</code></td><td><code>plot_distribution(tmp**5,&#39;power=5&#39;)</code></td></tr><tr><td><img src="/post/698179e8/3次.png" alt="3次"></td><td><img src="/post/698179e8/5次.png" alt="5次"></td></tr></tbody></table></div><h2 id="3-回测计算的是单利"><a href="#3-回测计算的是单利" class="headerlink" title="3.回测计算的是单利"></a>3.回测计算的是单利</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">[</span><span class="token string">'ac_returns'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'returns'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cumsum<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-因子组合优化的最简单形式"><a href="#4-因子组合优化的最简单形式" class="headerlink" title="4.因子组合优化的最简单形式"></a>4.因子组合优化的最简单形式</h2><p>本报告根据模型滚动训练和预测的结果，将所有测试集上的预测结果作为最终合成的打分输出用于策略组合构建，每5个交易日进行一次调仓，仓位调整逻辑是在一定的约束条件下最大化加权模型预测打分值，同时限制组合的换手。每次调仓日的模型预测输出的股票得分向量记为 $\text{score}_{t}$，当期目标权重向量记为 $w_t$，优化目标方程为:</p><script type="math/tex; mode=display">\begin{aligned}& \max \left(\sum_{i=1}^n w_{t, i} * \text { score }_{t, i}-\alpha\left|w_t-w_{t-1}\right|\right) \\& \text { s.t }\left\{\begin{array}{l}-0.005 I \leq w_t-w_{\text {benchmark }} \leq 0.005 I \\\sum_{i=1}^n w_{t, i}=1 \\w_t \geq 0\end{array}\right.\end{aligned}</script><p>其中，$\alpha$用于约束换手率，取值 0.05 ；$ w_{benchmark}$为股票的基准权重向量； 1 是所有元素为 1 的长度为 $w_t$的向量，个股权重相对于基准成分股权重的偏离限制在正负 $0.5 \%$ 内。策略每 5 个交易日在收盘后通过上述优化目标和条件求解权重。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-如何根据市场交易规则（最小交易单位）来执行计算出的交易信号。&quot;&gt;&lt;a href=&quot;#1-如何根据市场交易规则（最小交易单位）来执行计算出的交易信号。&quot; class=&quot;headerlink&quot; title=&quot;1.如何根据市场交易规则（最小交易单位）来执行计算出的交</summary>
      
    
    
    
    
    <category term="实习" scheme="https://nobodyyj.github.io/tags/%E5%AE%9E%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>学习面向对象编程</title>
    <link href="https://nobodyyj.github.io/post/f268ed81.html"/>
    <id>https://nobodyyj.github.io/post/f268ed81.html</id>
    <published>2023-10-10T03:14:04.000Z</published>
    <updated>2023-10-23T08:05:56.364Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用class创建类的几个特殊函数">使用Class()创建类的几个特殊函数</h2><h3 id="new__"><code>__new__</code></h3><h3 id="init__"><code>__init__</code></h3><h3 id="call__">3.<code>__call__</code></h3><p>定义：<code>__call__</code>是创建实例对象的运算符。**元类的__call__方法可以用来控制该元类所创建的类去创建实例对象的过程**</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># example 1</span><span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'[</span><span class="token interpolation"><span class="token punctuation">&#123;</span>num<span class="token punctuation">&#125;</span></span><span class="token string">] </span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>myobj <span class="token operator">=</span> MyClass<span class="token punctuation">(</span><span class="token punctuation">)</span>myobj<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>myobj<span class="token punctuation">.</span>__call__<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>MyClass( )</code>就相当于<code>MyClass.__call__( )</code>，就会按照定义把调用者类MyClass打印出来</p><p>但是Myclass在定义的时候没有return值，所以创建的实例为空。</p><hr><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> firstname<span class="token punctuation">,</span> lastname<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>firstname <span class="token operator">=</span> firstname        self<span class="token punctuation">.</span>lastname <span class="token operator">=</span> lastname    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">from_fullname</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> fullname<span class="token punctuation">)</span><span class="token punctuation">:</span>        cls<span class="token punctuation">.</span>firstname<span class="token punctuation">,</span> cls<span class="token punctuation">.</span>lastname <span class="token operator">=</span> fullname<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此处的<code>cls</code>和<code>self</code>的用法规定（<strong>Functionand method arguments</strong>）:</p><p>Always use <code>self</code> for the first argument to instancemethods.</p><p>Always use <code>cls</code> for the first argument to classmethods.</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;使用class创建类的几个特殊函数&quot;&gt;使用Class()创建类的几个特殊函数&lt;/h2&gt;
&lt;h3 id=&quot;new__&quot;&gt;&lt;code&gt;__new__&lt;/code&gt;&lt;/h3&gt;
&lt;h3 id=&quot;init__&quot;&gt;&lt;code&gt;__init__&lt;/code&gt;&lt;/h3&gt;
&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MySQL学习记录</title>
    <link href="https://nobodyyj.github.io/post/77d962bf.html"/>
    <id>https://nobodyyj.github.io/post/77d962bf.html</id>
    <published>2023-09-28T03:44:11.000Z</published>
    <updated>2023-09-30T09:30:43.678Z</updated>
    
    <content type="html"><![CDATA[<p><strong>本文用来记录DBMS小白学习MySQL的过程</strong>。</p><p>学习资源链接：https://www.bilibili.com/video/BV1iq4y1u7vj?p=12&amp;vd_source=44ba9a7b92cb9c058705d88870afca92</p><h2 id="学习主线">学习主线：</h2><figure><img src="/post/77d962bf/image-20230928115341489.png" alt="image-20230928115341489"><figcaption aria-hidden="true">image-20230928115341489</figcaption></figure><h1 id="第03章_基本的select语句select非常重要">第03章_基本的SELECT语句（SELECT非常重要）</h1><h2 id="sql的分类">SQL的分类</h2><p>DDL:数据定义语言。CREATE  TRUNCATE DML:数据操作语言。INSERTDCL:数据控制语言。COMMIT </p><p>查询和更新指令构成了 SQL 的 DML部分（<strong>增删改查</strong>）：</p><ul><li><code>INSERT INTO</code> - 向数据库表中插入数据</li><li><code>DELETE</code> - 从数据库表中删除数据</li><li><code>UPDATE</code> - 更新数据库表中的数据</li><li><code>SELECT</code> - 从数据库表中获取数据</li></ul><p>SQL 的数据定义语言 (DDL)部分使我们有能力创建或删除表格。我们也可以定义索引（键），规定表之间的链接，以及施加表间的约束。</p><p>SQL 中最重要的 DDL 语句:</p><ul><li><code>CREATE DATABASE</code> - 创建新数据库</li><li><code>ALTER DATABASE</code> - 修改数据库</li><li><code>CREATE TABLE</code> - 创建新表</li><li><code>ALTER TABLE</code> - 变更（改变）数据库表</li><li><code>DROP TABLE</code> - 删除表</li><li><code>CREATE INDEX</code> - 创建索引（搜索键）</li><li><code>DROP INDEX</code> - 删除索引</li></ul><h2 id="sql的数据导入方法">SQL的数据导入方法</h2><h3 id="如果是使用cmd命令行">如果是使用cmd命令行</h3><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">mysql -u root -p # 进入mysql数据库source # + 文件的全部路径名，比如&quot;source d:\atguigudb.sql;&quot; use aiguigudb #运行sql文件，show tables;即可看到各表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="使用navicat时">使用Navicat时</h3><figure><img src="/post/77d962bf/image-20230930152422470.png" alt="image-20230930152422470"><figcaption aria-hidden="true">image-20230930152422470</figcaption></figure><p>右键图中atguiggudb，运行SQL文件</p><figure><img src="/post/77d962bf/image-20230930152602013.png" alt="image-20230930152602013"><figcaption aria-hidden="true">image-20230930152602013</figcaption></figure><p>然后刷新，表就会更新。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;本文用来记录DBMS小白学习MySQL的过程&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;学习资源链接：https://www.bilibili.com/video/BV1iq4y1u7vj?p=12&amp;amp;vd_source=44ba9a7b92cb9c0587</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Kaggle比赛入门计划</title>
    <link href="https://nobodyyj.github.io/post/2c68a937.html"/>
    <id>https://nobodyyj.github.io/post/2c68a937.html</id>
    <published>2023-09-22T03:08:36.000Z</published>
    <updated>2023-09-22T04:07:05.917Z</updated>
    
    <content type="html"><![CDATA[<p>今天忽然发现optiver在kaggle上发布了使用机器学习利用收盘的order book来预测集合竞价阶段的股票价格。</p><p><a href="https://www.kaggle.com/code/tomforbes/optiver-trading-at-the-close-introduction">https://www.kaggle.com/code/tomforbes/optiver-trading-at-the-close-introduction</a></p><p>后续将围绕Optiver的这个竞赛，学习如何Kaggle参加比赛（调用计算资源&amp;提交符合规定的参赛code），同时希望能基本完成这个比赛。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天忽然发现optiver在kaggle上发布了使用机器学习利用收盘的order book来预测集合竞价阶段的股票价格。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.kaggle.com/code/tomforbes/optiver-trading-at-the</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>关于选校的一些想法</title>
    <link href="https://nobodyyj.github.io/post/8be97aef.html"/>
    <id>https://nobodyyj.github.io/post/8be97aef.html</id>
    <published>2023-09-19T16:21:28.000Z</published>
    <updated>2023-09-19T16:41:34.234Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于选校的一些想法"><a href="#关于选校的一些想法" class="headerlink" title="关于选校的一些想法"></a>关于选校的一些想法</h1><p>本来是打算好好学习MySQL和数据结构的，但是忽然入了贸大的量化投资方向，一下子要重新拿起尘封许久的数三和英语书，居然还要做PPT进行答辩，而且是在生日那天一大早背井离乡地进京赶考，不禁让我高强度刷xhs思考“我真的需要这份offer吗”</p><p>所以！</p><p><strong>我打算写下来一些我现在的想法，以便在2023年9月29号填系统的时候，帮助我进行选择。</strong></p><h2 id="央财的课程安排"><a href="#央财的课程安排" class="headerlink" title="央财的课程安排"></a>央财的课程安排</h2><p><img src="/post/8be97aef/3093f6a31047b074ce24b38c6ed22f8.jpg" alt="Alt text"></p><h2 id><a href="#" class="headerlink" title></a><img src="/post/8be97aef/b321ac910c9adac3696188bf2d59506.jpg" alt="Alt text"></h2><p>我的目标一定不是留在北京，而是利用在央财这段时间尽量打好机器学习的理论基础，把C++、DL、ML、optimization、SQL给学明白。尽早开始打kaggle比赛，以弥补因为地理位置而耽误的实习不足的问题。</p><p><strong>那么我为什么要去贸大呢！</strong></p><p>因为我真的好不放心央财！！！我是量化投资方向的小白鼠！如果发现因为实习导致找不到quant工作且家里不支持我去hk和坡，我就真得去银行了……我还是很想了解一下贸大的<strong>考核难度、课程设置、实习安排和毕业生去向</strong>的，而这些我在网上真的找不到相关的回答，看他们公布的去向都是四五年之前了（那时投行还是版本答案呢）。</p><p>写到这里，其实我已经做出了offer的选择，但是我一定不会浪费这笔支出，指定得把我看不出来的<strong>央财的培养方案的不足</strong>给挖出来，并且我得搞明白<strong>哪些是需要从实习中学到的，哪些是可以通过科研替代学习来掌握的</strong>，我认为掌握了这些问题的答案，是足以帮助我做出一个让我不会后悔的选择。</p><p>btw，千万不要“因为不喜欢A，而选择B”。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;关于选校的一些想法&quot;&gt;&lt;a href=&quot;#关于选校的一些想法&quot; class=&quot;headerlink&quot; title=&quot;关于选校的一些想法&quot;&gt;&lt;/a&gt;关于选校的一些想法&lt;/h1&gt;&lt;p&gt;本来是打算好好学习MySQL和数据结构的，但是忽然入了贸大的量化投资方向，一下子要重</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>公司金融部分知识点</title>
    <link href="https://nobodyyj.github.io/post/9fac0702.html"/>
    <id>https://nobodyyj.github.io/post/9fac0702.html</id>
    <published>2023-09-17T14:56:02.000Z</published>
    <updated>2023-09-17T15:36:07.630Z</updated>
    
    <content type="html"><![CDATA[<h1 id="公司金融知识点"><a href="#公司金融知识点" class="headerlink" title="公司金融知识点"></a>公司金融知识点</h1><h2 id="影响-beta-的几个因素（三个都是同向的）"><a href="#影响-beta-的几个因素（三个都是同向的）" class="headerlink" title="影响$\beta$的几个因素（三个都是同向的）"></a>影响$\beta$的几个因素（三个都是同向的）</h2><h3 id="周期性"><a href="#周期性" class="headerlink" title="周期性"></a>周期性</h3><h3 id="DOL（Degree-of-Operating-Levergae"><a href="#DOL（Degree-of-Operating-Levergae" class="headerlink" title="DOL（Degree of Operating Levergae)"></a>DOL（Degree of Operating Levergae)</h3><script type="math/tex; mode=display">D O L=\frac{\Delta E B I T / E B I T}{\Delta Q / Q}</script><p>其中，Q为产销量</p><script type="math/tex; mode=display">D O L=\frac{E B I T+F C}{E B I T}</script><p>FC是 总固定成本</p><h3 id="DFL（Degree-of-Financial-Leverage）"><a href="#DFL（Degree-of-Financial-Leverage）" class="headerlink" title="DFL（Degree of Financial Leverage）"></a>DFL（Degree of Financial Leverage）</h3><script type="math/tex; mode=display">D F L=\frac{\Delta E P S / E P S}{\Delta E B I T / E B I T}</script><p>其中，EPS是Earing Per Share，为本期税后净利润/正发行在外的普通股加权平均数</p><p>EBIT为Earing Before Interest and Tax，为净利润+利息+税</p><script type="math/tex; mode=display">D F L=\frac{E B I T}{E B I T-I}</script><p>其中，I为利息</p><h2 id="MM定理"><a href="#MM定理" class="headerlink" title="MM定理"></a>MM定理</h2><h3 id="无税"><a href="#无税" class="headerlink" title="无税"></a>无税</h3><p>1.资本结构不影响公司价值</p><script type="math/tex; mode=display">\text { 公司价值 = 负债的市场价值 }+\text { 权益的市场价值 }</script><p>2.股权的期望收益率 $r_E$ 和公司的杠杆结构 $\frac{D}{E}$ 成正比，比例系数为$r_A-r_D$</p><h3 id="有税"><a href="#有税" class="headerlink" title="有税"></a>有税</h3><p>1.</p><script type="math/tex; mode=display">\text { 公司价值 = 全股权融资时的价值 }+P V \text { (税盾) }</script><p><img src="https://cdn.niusouti.com/images/edcd8895fabcb605_img/3d7cda4ca7c9d6d4.png" alt="img"></p><p>2.</p><p>公司利息支付有税盾时，随负债增加，税后的WACC下降</p><p><img src="/post/9fac0702/1.png" alt="img-1"></p><h2 id="考虑有税的MM定理出现的三大结论"><a href="#考虑有税的MM定理出现的三大结论" class="headerlink" title="考虑有税的MM定理出现的三大结论"></a>考虑有税的MM定理出现的三大结论</h2><h3 id="权衡理论（静态权衡理论）"><a href="#权衡理论（静态权衡理论）" class="headerlink" title="权衡理论（静态权衡理论）"></a>权衡理论（静态权衡理论）</h3><p>把税盾效应和破产成本考虑进来，企业就会有一个最优的股权和债券融资比例，这边是资本结构的<u><strong>权衡理论</strong></u></p><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a><strong>定义</strong></h4><p>公司在进行资本结构决策时，会权衡税盾的好处与财务困境成本，<strong>最大化公司价值</strong>。这种方法般被称为资本结构的权衡理论或静态权衡理论。（这边的公司价值实际上是指市场性索取权的价值）</p><h4 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h4><p><img src="/post/9fac0702/2.png" alt="img-2"></p><p>上图展现了理论上的最优资本结构。税盾增加杜杆公司的价值, 财务困境成本降低杜杆公司的价 值。两个因素互相抵消, 在 $B^*$ 点产生最优债务额。</p><h4 id="税收对加权平均资本的影响"><a href="#税收对加权平均资本的影响" class="headerlink" title="税收对加权平均资本的影响"></a>税收对加权平均资本的影响</h4><p>根据静态权衡理论， $\boldsymbol{R}<em>{W A C C}$ 首先因为税盾的好处而下降。超过 $B^*$ 点后， $\boldsymbol{R}</em>{W A C C}$ 开始财务困境成本 而上升。<br><img src="/post/9fac0702/3.jpg" alt="img-3"></p><h3 id="优序融资理论"><a href="#优序融资理论" class="headerlink" title="优序融资理论"></a>优序融资理论</h3><h5 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h5><p>优序融资理论亦译 “啄食顺序理论”。以信息不对称理论为基础, 并考虑交易成本的存在。公司 在为投资项目筹集资金时, 首先选择内部融资, 其次才考虑外部融资; 如果需要进行外部筹资, 公司 将首先选择高等级债务工具, 然后选择低等级债务工具, 例如可转换债券与可转换优先股, 最后才选 择普通股票。</p><h5 id="融资法则"><a href="#融资法则" class="headerlink" title="融资法则"></a>融资法则</h5><p><strong>(1) 法则 1:</strong> 采用内部融资<br>管理者在给权益和债务定价时, 都要担心投资者的怀疑态度, 因此先考虑内部融资。</p><p><strong>(2) 法则 2:</strong> <strong>先发行最稳健的证券</strong><br>与权益相比, 公司债务具有相对较小的风险, 因此, 需要外部融资时, 先发行稳健的债券, 在公 司达到一定的负债水平后再发行权益, 此外, 发行直接债务应先于发行可转换债, 最后再是股权。</p><p><strong>(3) 理论特点</strong><br>(1)不存在财务杠杆的目标值, 财务杜杆总额根据可利用项目随即决定。</p><h3 id="信号理论"><a href="#信号理论" class="headerlink" title="信号理论"></a>信号理论</h3><p>管理层改变公司杜杆时, 会传递某些信息。一般认为, 当管理层提高杜杆时, 意味着公司前景较好, 公司价值会提高。</p><h4 id="理性世界"><a href="#理性世界" class="headerlink" title="理性世界"></a>理性世界</h4><p>理性的企业预计其盈利将增加时, 会提高其负债水平; 理性的投资者把负债作为公司价值的一个信号, <strong>负债越多, 公司价值越高。</strong></p><h4 id="管理层愚弄投资者"><a href="#管理层愚弄投资者" class="headerlink" title="管理层愚弄投资者"></a>管理层愚弄投资者</h4><p>管理层愚弄投资者的动机一一公司可以通过承担额外的负债来愚弄投资者, 使投资者认为公司价值比实际的更大。但这种行为会增加成本, 使股价下跌。在管理层不会愚弄投资者的世界里, 价值高 的公司比价值低的公司发行更多的债券, 投资者把发债作为公司价值的正信号。</p><h2 id="金融摩擦（financial-frictions"><a href="#金融摩擦（financial-frictions" class="headerlink" title="金融摩擦（financial frictions)"></a>金融摩擦（financial frictions)</h2><p>信息不对称、期限错频、交易成本</p><h3 id="信息不对称"><a href="#信息不对称" class="headerlink" title="信息不对称"></a>信息不对称</h3><ol><li>事后——道德风险</li><li>事前——逆向选择</li></ol><h3 id="委托代理"><a href="#委托代理" class="headerlink" title="委托代理"></a>委托代理</h3><p>掌握信息的代理方</p><p>没有掌握信息的委托方</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;公司金融知识点&quot;&gt;&lt;a href=&quot;#公司金融知识点&quot; class=&quot;headerlink&quot; title=&quot;公司金融知识点&quot;&gt;&lt;/a&gt;公司金融知识点&lt;/h1&gt;&lt;h2 id=&quot;影响-beta-的几个因素（三个都是同向的）&quot;&gt;&lt;a href=&quot;#影响-beta-的几个</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>搭建个人blog的资源&amp;遇到的问题及其解决方法</title>
    <link href="https://nobodyyj.github.io/post/7b3956b1.html"/>
    <id>https://nobodyyj.github.io/post/7b3956b1.html</id>
    <published>2023-09-17T14:17:26.000Z</published>
    <updated>2023-11-24T13:15:50.601Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用来记录自己学习搭建个人blog的资料-amp-遇到的问题及其解决方法"><a href="#用来记录自己学习搭建个人blog的资料-amp-遇到的问题及其解决方法" class="headerlink" title="用来记录自己学习搭建个人blog的资料&amp;遇到的问题及其解决方法"></a>用来记录自己学习搭建个人blog的资料&amp;遇到的问题及其解决方法</h1><h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><p><a href="http://haiyong.site/post/cda958f2.html">Hexo+阿里云&amp;GitHub 搭建个人博客 | 海拥 (haiyong.site)</a></p><p><a href="https://www.fomal.cc/posts/e593433d.html">https://www.fomal.cc/posts/e593433d.html</a><br>主题：Butterfly<br><a href="https://butterfly.js.org/posts/4aa8abbe/#代碼高亮主題">Butterfly 安裝文檔(三) 主題配置-1 | Butterfly</a></p><h2 id="目前遇到的问题"><a href="#目前遇到的问题" class="headerlink" title="目前遇到的问题"></a>目前遇到的问题</h2><h3 id="图挂了"><a href="#图挂了" class="headerlink" title="图挂了"></a>图挂了</h3><p><img src="/post/7b3956b1/image-20230917220037303.png" alt="image-20230917220037303"></p><p><strong>解决方法</strong>：要使用相对路径“./搭建个人blog的资源-遇到的问题及其解决方法/image-20230917220037303.png”</p><h3 id="目录是乱的"><a href="#目录是乱的" class="headerlink" title="目录是乱的"></a>目录是乱的</h3><p><img src="/post/7b3956b1/image-20230917220254151.png" alt="image-20230917220254151"><br><strong>解决方法</strong>：直接删除手动加上的数字，“# ##”会自动排序</p><h3 id="在多台电脑之间使用Git进行数据同步时因为proxy问题报错"><a href="#在多台电脑之间使用Git进行数据同步时因为proxy问题报错" class="headerlink" title="在多台电脑之间使用Git进行数据同步时因为proxy问题报错"></a>在多台电脑之间使用Git进行数据同步时因为proxy问题报错</h3><p>出现</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">fatal: unable to access &#39;XXX&#39;: Recv failure: Connection was reset<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>解决办法：</strong></p><ol><li><p>依次将如下两条语句复制到git中后，点击回车</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">git config <span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">global</span> <span class="token operator">-</span><span class="token operator">-</span>unset http<span class="token punctuation">.</span>proxy git config <span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">global</span> <span class="token operator">-</span><span class="token operator">-</span>unset https<span class="token punctuation">.</span>proxygit config <span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">global</span> http<span class="token punctuation">.</span>proxy http<span class="token punctuation">:</span><span class="token operator">//</span>手动设置代理荔枝<span class="token punctuation">:</span>端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><ol><li><p>在cmd中输入（用来清理DNS缓存）</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">ipconfig&#x2F;flushdns<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>正常输入</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">git add .git commit -m &quot;xxxx&quot;git push<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="多台电脑之间协同工作的方法"><a href="#多台电脑之间协同工作的方法" class="headerlink" title="多台电脑之间协同工作的方法"></a>多台电脑之间协同工作的方法</h3><p>摘自：<a href="https://xiaorui2.github.io/2019/05/25/Hexo%E5%8D%9A%E5%AE%A2%E5%A4%9A%E5%8F%B0%E7%94%B5%E8%84%91/">https://xiaorui2.github.io/2019/05/25/Hexo%E5%8D%9A%E5%AE%A2%E5%A4%9A%E5%8F%B0%E7%94%B5%E8%84%91/</a></p><p>思路：<strong>使用git分支</strong>。</p><h1 id="准备工作和环境要求"><a href="#准备工作和环境要求" class="headerlink" title="准备工作和环境要求"></a>准备工作和环境要求</h1><p>在这之前，首先你得有台电脑是配置好了的，也就是确保你已经使用<code>hexo</code>在<code>github pages</code>上面部署好你的个人博客，并在本地电脑拥有该博客的部署环境，即类似于以下图片的文件目录</p><p><a href="https://xiaorui2.github.io/2019/05/25/Hexo博客多台电脑/1.png"><img src="https://xiaorui2.github.io/2019/05/25/Hexo%E5%8D%9A%E5%AE%A2%E5%A4%9A%E5%8F%B0%E7%94%B5%E8%84%91/1.png" alt="img"></a></p><h1 id="对username-github-io仓库新建分支，并克隆"><a href="#对username-github-io仓库新建分支，并克隆" class="headerlink" title="对username.github.io仓库新建分支，并克隆"></a>对username.github.io仓库新建分支，并克隆</h1><p>在Github的<code>username.github.io</code>仓库上新建一个<code>xxx</code>分支，并切换到该分支，并在该仓库-&gt;<code>Settings</code>-&gt;<code>Branches</code>-&gt;<code>Default branch</code>中将默认分支设为<code>xxx</code>，<code>save</code>保存；然后将该仓库克隆（必须要用命令行）到本地，进入该<code>username.github.io</code>文件目录。</p><p>完成上面步骤后，在当前目录使用<code>Git Bash</code>执行<code>git branch</code>命令查看当前所在分支，应为新建的分支<code>xxx</code></p><h1 id="将本地博客的部署文件拷贝进username-github-io文件目录并提交"><a href="#将本地博客的部署文件拷贝进username-github-io文件目录并提交" class="headerlink" title="将本地博客的部署文件拷贝进username.github.io文件目录并提交"></a>将本地博客的部署文件拷贝进username.github.io文件目录并提交</h1><p>将本地博客的部署文件全部拷贝进<code>username.github.io</code>文件目录，将拷贝进来的博客<code>hexo</code>部署环境提交到<code>xxx</code>分支，提交之前需注意：将<code>themes</code>目录以内中的主题的<code>.git</code>目录删除（如果有），因为一个<code>git</code>仓库中不能包含另一个<code>git</code>仓库，提交主题文件夹会失败。</p><p>执行<code>git add .</code>、<code>git commit -m &#39;back up hexo files&#39;</code>（引号内容可改）、<code>git push</code>即可将博客的hexo部署环境提交到<code>GitHub</code>个人仓库的<code>xxx</code>分支。现在可以在GitHub上的<code>*username*.github.io</code>仓库看到两个分支的差异了。</p><p><code>master</code>分支和<code>xxx</code>分支各自保存着一个版本，<code>master</code>分支用于保存博客静态资源，提供博客页面供人访问；<code>xxx</code>分支用于备份博客部署文件，供自己维护更新，保证了两者在一个<code>GitHub</code>仓库内互不冲突。至此你搭配好的电脑上的任务就完成了。</p><h1 id="新电脑环境部署和更新"><a href="#新电脑环境部署和更新" class="headerlink" title="新电脑环境部署和更新"></a>新电脑环境部署和更新</h1><p>首先你需要安装一下Hexo：</p><pre class="line-numbers language-none"><code class="language-none">npm install hexonpm installnpm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后将新电脑的生成的<code>ssh key</code>添加到<code>GitHub</code>账户上</p><p>在新电脑上克隆<code>username.github.io</code>仓库的<code>xxx</code>分支到本地，此时本地git仓库处于<code>xxx</code>分支</p><p>切换到<code>username.github.io</code>目录，执行<code>npm install</code>(由于仓库有一个<code>.gitignore</code>文件，里面默认是忽略掉<code>node_modules</code>文件夹的，也就是说仓库的<code>hexo</code>分支并没有存储该目录[也不需要]，所以需要<code>install</code>下.</p><p>然后就可以正常的编辑、撰写文章或其他博客更新改动。</p><p>依次执行<code>git add .</code>、<code>git commit -m &#39;back up hexo files&#39;</code>（引号内容可改）、<code>git push</code>指令，保证<code>xxx</code>分支版本最新</p><p>执行<code>hexo d -g</code>指令（在此之前，有时可能需要执行<code>hexo clean</code>），完成后就会发现，最新改动已经更新到<code>master</code>分支了，两个分支互不干扰！</p><p><strong>注意</strong>：每次<strong>换电脑进行博客更新</strong>时，不管上次在其他电脑有没有更新（就怕更新之后忘了），最好先<code>git pull</code>获取<code>xxx</code>分支的最新版本，之后再进行编辑和提交。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;用来记录自己学习搭建个人blog的资料-amp-遇到的问题及其解决方法&quot;&gt;&lt;a href=&quot;#用来记录自己学习搭建个人blog的资料-amp-遇到的问题及其解决方法&quot; class=&quot;headerlink&quot; title=&quot;用来记录自己学习搭建个人blog的资料&amp;am</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>关于我国目前货币超发问题的看法</title>
    <link href="https://nobodyyj.github.io/post/bc16ba42.html"/>
    <id>https://nobodyyj.github.io/post/bc16ba42.html</id>
    <published>2023-09-16T16:00:00.000Z</published>
    <updated>2023-09-16T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://d.ifengimg.com/w1080_h1603_ablur_q90_webp/x0.ifengimg.com/ucms/2023_20/CC17DCD097C29014B4FAFFF6433FBD67836F22B0_size1038_w1080_h1603.png" alt="img"></p><h3 id="目前处于货币政策层面处于流动性陷阱"><a href="#目前处于货币政策层面处于流动性陷阱" class="headerlink" title="目前处于货币政策层面处于流动性陷阱"></a>目前处于货币政策层面处于流动性陷阱</h3><p>来源：<a href="https://finance.sina.com.cn/stock/roll/2023-06-10/doc-imywunmf0849027.shtml">通货紧缩了吗？樊纲：不，现在是流动性陷阱<em>新浪财经</em>新浪网 (sina.com.cn)</a></p><p>​        2023中国经济传媒大会上，针对目前经济复苏缓慢问题，中国经济体制改革会副会长、中国改革研究基金会秘书长樊纲指出，“现在的情况不是通货紧缩，而是出现了流动性陷阱。”</p><p>　　樊纲指出，通货紧缩是指货币数量的减少，导致需求不足，导致价格下降。<strong>但是前年我国货币增长速度已达8.7%，去年达11%，今年第一季度也达到12.7%，比过去大幅增长，在我们GDP只有4%增长的情况下，我们货币增发这么多，但这个时候却出现了价格下降，这不叫通货紧缩，而是叫做流动性陷阱。</strong></p><p>　　樊纲指出，流动性陷阱指的是你货币再多、融资成本再低，但如果预期投资回报更低的话，我们仍然不需要货币，不去投资，不去扩大需求，这就像货币掉进了一个黑洞，我们现在的情况就属于这种情况，就是企业、居民的需求不振。</p><p>​        </p><h3 id="为什么说我国会处于资产负债表衰退？"><a href="#为什么说我国会处于资产负债表衰退？" class="headerlink" title="为什么说我国会处于资产负债表衰退？"></a>为什么说我国会处于资产负债表衰退？</h3><p>1.从M2的增速和CPI、PPI数据可以看出，增量的货币并没有流入实际的市场，我认为的原因是钱被企业部分用于偿还负债，被民众用于储蓄，而没有用于扩大再生产或者实际消费。</p><p>2.对于企业，企业碍于国内外的政策风险，不敢投资扩大再生产，导致发展停滞，企业倾向于储蓄而非消费。同时，企业面临高杠杆的问题，在增长停滞之后面临巨大偿债压力，被迫采取去杠杆、降本增效的发展模式，所以我们会看到互联网大厂的裁员潮。</p><p>3.这也导致了私人部分的消费停滞。一方面，在就业环境不佳，薪资增幅降低，甚至面临裁员的风险下，民众消费欲望降低，储蓄欲望增强。（这点和企业是一样的，导致了活期存款的定期化，反映在M1-M2剪刀差的不断增大）。另一方面，中国的私人部门的杠杆率也很高，很多高收入群体都是背着房贷的，裁员潮会转变为断供潮。这点可以反映在不断增加的法拍房数据（2023年1-4月全国法拍房挂拍量为146549套，同比增长22.48%）上。这进而导致银行的贷款质量下降，进一步又加强了“融资难、钱荒”的情况。</p><p>为什么我国会面临现在的情况？</p><p>具体从分析的框架来说，可以从消费、投资、外贸三个角度来探。</p><h4 id="1-消费"><a href="#1-消费" class="headerlink" title="1.消费"></a>1.消费</h4><p>内需不足。具体来说，是企业发展压力传导至消费者，大家的预期转弱，储蓄欲望加强。</p><h4 id="2-投资"><a href="#2-投资" class="headerlink" title="2.投资"></a>2.投资</h4><p>投资风险大，收益低，没有好的投资机会。具体来说是企业没有好的投资机会。</p><h4 id="3-外贸"><a href="#3-外贸" class="headerlink" title="3.外贸"></a>3.外贸</h4><p>中美脱钩，东盟成为我们主要出口对象，对欧盟、美国、日韩出口下降。</p><p>出口的核心驱动是汽车制造业。</p><p>这主要是因为我们面临出生率暴跌，被迫采取限制房企无序融资，调控房价的政策。</p><h2 id="人口、房地产、杠杆三者的矛盾关系。"><a href="#人口、房地产、杠杆三者的矛盾关系。" class="headerlink" title="人口、房地产、杠杆三者的矛盾关系。"></a><strong>人口、房地产、杠杆三者的矛盾关系。</strong></h2><p>房价，行政手段干预导致价格信号失灵，会导致市场资源配置情况持续扭曲。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://d.ifengimg.com/w1080_h1603_ablur_q90_webp/x0.ifengimg.com/ucms/2023_20/CC17DCD097C29014B4FAFFF6433FBD67836F22B0_size103</summary>
      
    
    
    
    
  </entry>
  
</feed>
